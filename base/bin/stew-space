#!/bin/bash

# Hyprland workspace/monitor profile management

set -e

STATE_FILE="$HOME/.cache/hypr_current_profile"

mkdir -p "$(dirname "$STATE_FILE")"

# Profile definitions
apply_work() {
    # Move existing workspaces to correct monitors
    hyprctl dispatch moveworkspacetomonitor 1 DP-3 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 2 eDP-1 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 3 DP-3 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 4 DP-3 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 5 eDP-1 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 6 eDP-1 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 7 eDP-1 >/dev/null 2>&1

    # Set workspace rules for future workspaces
    hyprctl keyword workspace "1,monitor:DP-3" >/dev/null 2>&1
    hyprctl keyword workspace "2,monitor:eDP-1" >/dev/null 2>&1
    hyprctl keyword workspace "3,monitor:DP-3" >/dev/null 2>&1
    hyprctl keyword workspace "4,monitor:DP-3" >/dev/null 2>&1
    hyprctl keyword workspace "5,monitor:eDP-1" >/dev/null 2>&1
    hyprctl keyword workspace "6,monitor:eDP-1" >/dev/null 2>&1
    hyprctl keyword workspace "7,monitor:eDP-1" >/dev/null 2>&1

    echo "work" > "$STATE_FILE"
}

apply_home() {
    # Clear workspace assignments - let workspaces float between monitors
    for i in {1..10}; do
        hyprctl keyword workspace "$i,monitor:" >/dev/null 2>&1
    done

    echo "home" > "$STATE_FILE"
}

apply_meet() {
    # Move existing workspaces - personal ones to laptop
    hyprctl dispatch moveworkspacetomonitor 1 eDP-1 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 2 eDP-1 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 3 eDP-1 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 4 eDP-1 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 5 eDP-1 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 6 eDP-1 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 7 eDP-1 >/dev/null 2>&1

    # Move meeting workspaces to external display
    hyprctl dispatch moveworkspacetomonitor 8 DP-3 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 9 DP-3 >/dev/null 2>&1
    hyprctl dispatch moveworkspacetomonitor 10 DP-3 >/dev/null 2>&1

    # Set workspace rules for future workspaces
    hyprctl keyword workspace "1,monitor:eDP-1" >/dev/null 2>&1
    hyprctl keyword workspace "2,monitor:eDP-1" >/dev/null 2>&1
    hyprctl keyword workspace "3,monitor:eDP-1" >/dev/null 2>&1
    hyprctl keyword workspace "4,monitor:eDP-1" >/dev/null 2>&1
    hyprctl keyword workspace "5,monitor:eDP-1" >/dev/null 2>&1
    hyprctl keyword workspace "6,monitor:eDP-1" >/dev/null 2>&1
    hyprctl keyword workspace "7,monitor:eDP-1" >/dev/null 2>&1
    hyprctl keyword workspace "8,monitor:DP-3" >/dev/null 2>&1
    hyprctl keyword workspace "9,monitor:DP-3" >/dev/null 2>&1
    hyprctl keyword workspace "10,monitor:DP-3" >/dev/null 2>&1

    echo "meet" > "$STATE_FILE"
}

get_current() {
    [[ -f "$STATE_FILE" ]] && cat "$STATE_FILE" || echo "unknown"
}

# Main logic
case "${1:-current}" in
    work)
        apply_work
        ;;
    home)
        apply_home
        ;;
    meet)
        apply_meet
        ;;
    current)
        echo "Current profile: $(get_current)"
        ;;
    list)
        current=$(get_current)
        echo "  work$([ "$current" = "work" ] && echo " *")"
        echo "  home$([ "$current" = "home" ] && echo " *")"
        echo "  meet$([ "$current" = "meet" ] && echo " *")"
        ;;
    pick)
        command -v fuzzel >/dev/null || { echo "fuzzel not found" >&2; exit 1; }

        current=$(get_current)
        profiles=("work" "home" "meet")

        # Build fuzzel input with current profile marked
        for profile in "${profiles[@]}"; do
            marker=""
            [[ "$profile" = "$current" ]] && marker=" *"
            echo "${profile}${marker}"
        done | fuzzel --dmenu --prompt="Profile: " | {
            read -r selected || exit 0  # Exit silently if cancelled
            selected=${selected% *}  # Remove marker

            case "$selected" in
                work) apply_work ;;
                home) apply_home ;;
                meet) apply_meet ;;
                *) echo "Invalid profile: $selected" >&2; exit 1 ;;
            esac
        }
        ;;
    *)
        echo "Usage: $0 [work|home|meet|current|list|pick]" >&2
        exit 1
        ;;
esac
